李铭：单机/分布式一致性
=======================

两类一致性
----------
一致性可以分为操作原子性和副本一致性两类。

操作原子性要求在多个数据分片上的操作要么都成功，要么都失败。

副本一致性要求同一个数据分片与其副本之间的保持一致。

单机一致性
----------
单机情况下一般情况下单机只有一份数据，这里不讨论副本一致性。

单机情况下要获得操作原子性一般利用数据提供的事务功能。如果操作的多个数据不在数据库中，而在内存或文件中，可以采用锁机制在代码中构造出一片临界区，在临界区中对多个数据进行操作，如果想要回滚，则需在离开临界区前执行补偿操作。

分布式一致性
------------

副本一致性
~~~~~~~~~~~

副本一致性的实现其实就是通过副本的复制来达到的。

复制分为两大类：
    #. 主从复制，指的是分布式系统中只有一个Master，写入数据时从Master写入，Salve负责从Master同步数据。同步的方式具体可以分为同步复制、异步复制和混合复制。
    #. 对等复制，指的是分布式系统中有多个Master，每个Master的都可以写入数据，且Master互为彼此的Slave，从其他Master同步数据。这里让我想起在用的Syncthing就属于对等复制。Syncthing是一个多设备同步文件的软件，每个设备都可以写文件，修改的文件内容会同步到其他设备。

与分布式副本一致性相关的算法:
    #. Paxos，通过投票机制来通过提案，保证副本之间的一致性。解决单点问题，系统中有多个Proposer可以接受客户端的请求。
    #. Raft，通过投票机制来选出Leader，然后由Leader来同步一条消息。同样解决单点问题，系统中有多个Candidate可以接受客户端的请求。
    #. ISR，降低系统容错的代价。将次级副本分为两个集合，其中一个称为ISR集合，其余的归到另一个集合。每次写入都需要主副本和ISR的副本都写入成功才提交，非ISR集合的副本采用异步复制进行同步。主备切换时只能从ISR中选出新的主副本。假设ISR集合的大小为f+1，那么系统最多容忍f个副本故障。而Paxos和Raft要容忍f个副本出现故障，需要系统至少拥有2f+1个副本。

操作原子性
----------

#. 2PC，两阶段提交，强一致性，事务的过程需要参与方锁住相应的资源直到事务结束。协调者在任何阶段出现故障，事务将无法完成，而且可能产生数据不一致或让参与方一致锁住相应的资源。
#. 3PC，类似2PC，增加了一个precommit阶段，使得在docommit阶段即使只有协调者故障也有可能完成事务，但仍然可能因为在其他阶段产生故障而使得数据不一致。
#. 将分布式事务转换为多个本地事务，然后依靠重试等方式达到最终一致性。具体方法是事务的发起方在本地增加一个消息库，将本地操作与往消息库插入消息作为一个事务执行。事务成功时将消息发送给参与方，发送成功才删除消息库的记录，由于不确定的因素导致多次发送时没有影响的。参与方接收到消息后要执行相应的操作，如果该操作是一个幂等操作，则直接执行。否则需要增加一个去重库来保证对消息的操作只执行一次。
#. DTS（分布式事务服务），每个服务实现标准的prepare、commit、rollback接口后，可由发起方发起事务并协调参与事务的服务。这种方式优于2PC的地方是整个事务的过程，不需要参与方一直锁住相关资源，而是允许系统处于一种暂时不一致的状态，再实现最终一致性。
#. 调用第三方服务，而该服务没有提供rollback的功能的话，可以将调用第三方服务的操作作为事务的最后一个操作，只有调用第三方服务成功，才提交食物，否则回滚之前对其他服务的操作。
