李铭：pdb + iostat
========================

pdb
-----
pdb 为Python程序实现了一个交互式的debug环境。
它能够暂停程序，查看变量的值，一步一步观察程序的执行情况，帮助你了解程序的运行过程和找出逻辑上的bug。
详细使用方法请参考 `pdb - Interactive Debugger <https://pymotw.com/2/pdb/>`_ ，以下为功能速查。

启动调试器
~~~~~~~~~~~

+------------+---------------------------------------------+
| 启动方式   | 具体方法                                    |
+------------+---------------------------------------------+
| 命令行启动 | python -m pdb your_script.py                |
+------------+---------------------------------------------+
| 解释器启动 | \>>> import your_script                     |
|            |                                             |
|            | \>>> pdb                                    |
|            |                                             |
|            | \>>> pdb.run('your_script.your_function()') |
+------------+---------------------------------------------+
| 程序内启动 | import pdb                                  |
|            |                                             |
|            | ...                                         |
|            |                                             |
|            | pdb.set_trace()                             |
|            |                                             |
|            | ...                                         |
+------------+---------------------------------------------+
| 奔溃后启动 | Traceback (most recent call last):          |
|            |                                             |
|            | ...                                         |
|            |                                             |
|            | XXXError: ...                               |
|            |                                             |
|            | \>>> import pdb                             |
|            |                                             |
|            | \>>> pdb.pm()                               |
+------------+---------------------------------------------+
    
控制调试器
~~~~~~~~~~

+-------------------------+--------------------------------------------------------------------------------------------+
| 指令                    | 功能                                                                                       |
+-------------------------+--------------------------------------------------------------------------------------------+
| where/w                 | 显示当前执行的那一行代码                                                                   |
+-------------------------+--------------------------------------------------------------------------------------------+
| list                    | 显示当前执行的代码及其周围一部分代码                                                       |
+-------------------------+--------------------------------------------------------------------------------------------+
| up                      | 跳到函数调用栈的上一帧                                                                     |
+-------------------------+--------------------------------------------------------------------------------------------+
| down                    | 跳到函数调用栈的下一帧                                                                     |
+-------------------------+--------------------------------------------------------------------------------------------+
| args                    | 显示当前帧的变量                                                                           |
+-------------------------+--------------------------------------------------------------------------------------------+
| p/print [variable_name] | 显示指定变量的值                                                                           |
+-------------------------+--------------------------------------------------------------------------------------------+
| pp [variable_name]      | 以漂亮的格式显示指定变量的值                                                               |
+-------------------------+--------------------------------------------------------------------------------------------+
| ![your script]          | 让python解释器执行[your script]                                                            |
+-------------------------+--------------------------------------------------------------------------------------------+
| step                    | 执行当前所在位置的代码，若当前位置是函数调用，则跳进该函数的第一行的位置，否则移动到下一行 |
+-------------------------+--------------------------------------------------------------------------------------------+
| next                    | 执行当前所在位置的代码并移动到下一行                                                       |
+-------------------------+--------------------------------------------------------------------------------------------+
| until                   | 执行代码直到运行到比当前代码行数大的位置，常用来跳出当前循环                               |
+-------------------------+--------------------------------------------------------------------------------------------+

断点
~~~~~~~~~

+------------------------------------------------------+-----------------------------------------------------------------------------+
| 指令                                                 | 功能                                                                        |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| (t)break [lineno]                                    | 在[lineno]行设置(临时)断点                                                  |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| (t)break [function name]                             | 在函数[function name]设置(临时)断点                                         |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| (t)break your_script.py:[lineno]                     | 在your_script.py的[lineno]行设置(临时)断点                                  |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| (t)break [lineno] [condition expression]             | 在[lineno]行设置有条件的(临时)断点                                          |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| condition [breakpoint number] [condition expression] | 使序号为[breakpoint number]的断点成为一个条件断点                           |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| break                                                | 显示已设置的断点                                                            |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| continue                                             | 执行代码直到遇到下一个断点                                                  |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| disable [breakpoint number]                          | 使序号为[breakpoint number]的断点失效                                       |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| enable [breakpoint number]                           | 使序号为[breakpoint number]的断点生效                                       |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| clear [breakpoint number]                            | 删除序号为[breakpoint number]的断点                                         |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| ignore [breakpoint number] [counter]                 | 使序号为[breakpoint number]的断点失效[counter]次                            |
+------------------------------------------------------+-----------------------------------------------------------------------------+
| commands [breakpoint number]                         | 在序号为[breakpoint number]的断点设置一个触发器，当断点生效时时执行指定脚本 |
|                                                      |                                                                             |
| (com) [your script]                                  |                                                                             |
|                                                      |                                                                             |
| (com) [your script]                                  |                                                                             |
|                                                      |                                                                             |
| ...                                                  |                                                                             |
|                                                      |                                                                             |
| (com) end                                            |                                                                             |
+------------------------------------------------------+-----------------------------------------------------------------------------+

改变执行流程
~~~~~~~~~~~~~

+---------------+----------------------------------+
| 指令          | 功能                             |
+---------------+----------------------------------+
| jump [lineno] | 使当前代码执行的位置跳到[lineno] |
+---------------+----------------------------------+
| run [args]    | 以[args]为参数重新运行程序       |
+---------------+----------------------------------+

定制你的调试器
~~~~~~~~~~~~~~~

+-----------------------------+---------------------------------+
| 指令                        | 功能                            |
+-----------------------------+---------------------------------+
| alias ([alias])             | 显示所有/指定的指令别名         |
+-----------------------------+---------------------------------+
| alias [alias] [your script] | 给脚本指定一个名为[alias]的别名 |
+-----------------------------+---------------------------------+
| unalias [alias]             | 删除指令别名                    |
+-----------------------------+---------------------------------+

保存调试设置
~~~~~~~~~~~~~

调试器按照"~/.pdbrc"、"./.pdbrc"读取文件中保存的指令并执行

iostat
-------

iostat 是用来监视CPU和设备的使用情况的工具

命令格式
~~~~~~~~~

iostat [参数] [间隔（秒）[次数]]

常用参数
~~~~~~~~~

+------+----------------------------+
| 参数 | 说明                       |
+------+----------------------------+
| -c   | 显示CPU的使用情况          |
+------+----------------------------+
| -d   | 显示设备的使用情况         |
+------+----------------------------+
| -p   | 显示磁盘及其分区的使用情况 |
+------+----------------------------+
| -k   | 以KB为单位显示统计信息     |
+------+----------------------------+
| -m   | 以MB为单位显示统计信息     |
+------+----------------------------+
| -x   | 显示详细的统计信息         |
+------+----------------------------+
| -V   | 显示版本信息               |
+------+----------------------------+

使用示例：查看CPU使用情况
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text 

    ymserver@gw-11:~$ iostat -c
    Linux 3.13.0-36-generic (gw-11.ad.awsjp)    02/10/2016  _x86_64_    (8 CPU)

    avg-cpu:  %user   %nice %system %iowait  %steal   %idle
               5.09    0.00    1.27    0.01    0.10   93.53

+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| 参数    | 说明                                                     | 备注                                                                                                       |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| %user   | CPU处于用户态的时间百分比                                |                                                                                                            |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| %nice   | CPU处于带nice值的用户态的时间百分比                      |                                                                                                            |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| %system | CPU处于内核态的时间百分比                                |                                                                                                            |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| %iowait | CPU等待IO的时间百分比                                    | 过高表示存在IO瓶颈                                                                                         |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| %steal  | 虚拟CPU等待正在为其他虚拟CPU服务的hypervisor的时间百分比 |                                                                                                            |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+
| %idle   | CPU空闲的时间百分比                                      | 若值高但系统响应慢，可能是因为等待内存分配花的时间过多，应加大内存；若值低，说明系统缺乏CPU资源，应升级CPU |
+---------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------------+

使用示例：查看设备使用情况
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text 
    
    ymserver@gw-11:~$ iostat -d -k
    Linux 3.13.0-36-generic (gw-11.ad.awsjp)    02/10/2016  _x86_64_    (8 CPU)

    Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
    xvda              0.40         0.09         4.07    1485167   65038632
    xvdb              2.52         1.80        37.45   28840577  598933600
    dm-0              0.01         0.07         0.05    1071272     867132
    dm-1              0.00         0.00         0.00      11669        436
    dm-2              0.00         0.00         0.00      16721        568
    dm-4              0.00         0.00         0.00        492          0
    dm-3              0.00         0.00         0.00      17145        424

    ymserver@gw-11:~$ iostat -d -x -k
    Linux 3.13.0-36-generic (gw-11.ad.awsjp)    02/10/2016  _x86_64_    (8 CPU)

    Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
    xvda              0.00     0.32    0.01    0.40     0.09     4.07    20.63     0.00    1.54    3.87    1.50   0.09   0.00
    xvdb              0.00     4.62    0.07    2.45     1.80    37.45    31.09     0.01    5.31    3.62    5.36   0.28   0.07
    dm-0              0.00     0.00    0.01    0.00     0.07     0.05    20.72     0.00    0.35    0.25    0.64   0.07   0.00
    dm-1              0.00     0.00    0.00    0.00     0.00     0.00    32.80     0.00    0.37    0.03    2.65   0.07   0.00
    dm-2              0.00     0.00    0.00    0.00     0.00     0.00    17.20     0.00    0.17    0.05    1.70   0.05   0.00
    dm-4              0.00     0.00    0.00    0.00     0.00     0.00     8.00     0.00    0.03    0.03    0.00   0.03   0.00
    dm-3              0.00     0.00    0.00    0.00     0.00     0.00    17.68     0.00    0.15    0.04    2.49   0.04   0.00

+-----------+-----------------------------------------------------------------------------------------+
| 参数      | 说明                                                                                    |
+-----------+-----------------------------------------------------------------------------------------+
| tps       | 该设备每秒的传输次数。一次传输是一个I/O请求，多个逻辑上的I/O请求可以合并为一个I/O请求。 |
+-----------+-----------------------------------------------------------------------------------------+
| kB_read/s | 每秒从设备读取的数据量                                                                  |
+-----------+-----------------------------------------------------------------------------------------+
| kB_wrtn/s | 每秒向设备写入的数据量                                                                  |
+-----------+-----------------------------------------------------------------------------------------+
| kB_read   | 从设备读取的总数据量                                                                    |
+-----------+-----------------------------------------------------------------------------------------+
| kB_wrtn   | 从设备写入的总数据量                                                                    |
+-----------+-----------------------------------------------------------------------------------------+
| rrqm/s    | 每秒有多少个合并过的读请求在排队                                                        |
+-----------+-----------------------------------------------------------------------------------------+
| wrqm/s    | 每秒有多少个合并过的写请求在排队                                                        |
+-----------+-----------------------------------------------------------------------------------------+
| r/s       | 每秒有多少个合并过的读请求被完成                                                        |
+-----------+-----------------------------------------------------------------------------------------+
| w/s       | 每秒有多少个合并过的写请求被完成                                                        |
+-----------+-----------------------------------------------------------------------------------------+
| rkB/s     | 每秒从设备读取的数据量                                                                  |
+-----------+-----------------------------------------------------------------------------------------+
| wkB/s     | 每秒向设备写入的数据量                                                                  |
+-----------+-----------------------------------------------------------------------------------------+
| avgrq-sz  | 平均每次I/O操作的数据量（单位：扇区）                                                   |
+-----------+-----------------------------------------------------------------------------------------+
| avgqu-sz  | 平均每毫秒的等待队列长度                                                                |
+-----------+-----------------------------------------------------------------------------------------+
| await     | 平均每次I/O操作所花费的时间（单位：毫秒），包括在队列中等待的时间和实际服务的时间       |
+-----------+-----------------------------------------------------------------------------------------+
| r_await   | 平均每次读操作所花费的时间（单位：毫秒），包括在队列中等待的时间和实际服务的时间        |
+-----------+-----------------------------------------------------------------------------------------+
| w_await   | 平均每次写操作所花费的时间（单位：毫秒），包括在队列中等待的时间和实际服务的时间        |
+-----------+-----------------------------------------------------------------------------------------+
| svctm     | 平均每次I/O操作的服务时间（单位：毫秒），未来将废弃此字段                               |
+-----------+-----------------------------------------------------------------------------------------+
| %util     | 设备带宽利用率                                                                          |
+-----------+-----------------------------------------------------------------------------------------+






参考资料
---------

.. [1] http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/iostat.html
.. [2] man page - iostat
.. [3] pdb – Interactive Debugger - http://pymotw.com/2/pdb/. 

