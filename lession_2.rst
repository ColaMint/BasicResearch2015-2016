Lession-2 《High Performance Web Sites》读后感 + Benchmark实践
==============================================================

《High Performance Web Sites》读后感
-------------------------------------

《High Performance Web Sites》这本书先讲到前端性能优化的空间之大：有80%~90%的时间花在下载页面的组件上，然后介绍了14条规则优化规则，并且通过实践数据说明优化的效益。

读完这本书，“优化”一词深入我心。想把一个软件做得高效，必须要往各个细节的效率上扣。具体来说：

1.首先，我们要对我们做东西的性能有一些量化的概念，用一些指标来衡量性能的高低。比如用浏览器的调试工具查看访问各个请求的时间、请求的个数、是否使用缓存...

2.然后，我们要了解哪些手段能够控制那些指标。例如：用HTTP头来控制缓存，压缩组件来减少传输时间，合并图片来减少请求个数...在这个过程中，我们可能需要系统去了解一个协议、一个软件的文档，从而找到性能优化的突破口。这是一个深入学习的过程，我们能从中注意到很多以前被忽略的细节。

3.最后我们通过种种手段，将一个个指标调整到满意的范围，并做好记录。

最近在帮别人折腾一个前端图片盗链的功能，一开始前端采用新建一个窗口来加载图片的方法，不过加载完后图片的样式很难被控制。最后还是采用了后台代理下载的方法，即每次下载图片，都是由后台发出不带Referer头的请求去实时下载图片后原样输出。由于一开始忽略了HTTP请求和响应的头部缓存控制，每次访问网页都需要后台帮忙把所有图片再下载一次，体验很差。看了这本书缓存相关章节后，我将用户的请求头作为curl的请求头，把curl的响应头作为用户的响应头，让浏览器和图片的服务器能通过缓存控制头部进行交流，最终使得缓存生效，体验效果好很多。


基于Wordpress进行Benchmark，调优nginx和php-fpm的参数配置
--------------------------------------------------------

+----------------+----------------------------------------------+
| OS             | 4.2.5-1-ARCH                                 |
+================+==============================================+
| CPU            | 4 x Intel(R) Core(TM) i3-2370M CPU @ 2.40GHz |
+----------------+----------------------------------------------+
| MEM            | 10GB                                         |
+----------------+----------------------------------------------+
| PHP            | 5.6.16                                       |
+----------------+----------------------------------------------+
| Benchmark Tool | apachebench                                  |
+----------------+----------------------------------------------+

Nginx: sendfile + tcp_nodelay + tcp_nopush 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

配置1:

.. code-block::

    sendfile        off;    
    tcp_nopush      off;    
    tcp_nodelay     off;
    
    Url: http://arch-li/wordpress/

+-------------------+------------------+
| Concurrency Level | Time per request |
+-------------------+------------------+
| 128               | 76.507 ms        |
+-------------------+------------------+
| 256               | 36.551 ms        |
+-------------------+------------------+
| 512               | 5.34 ms          |
+-------------------+------------------+

配置2:

.. code-block::

    sendfile        on;    
    tcp_nopush      on;    
    tcp_nodelay     on;

    Url: http://arch-li/wordpress/

+-------------------+------------------+
| Concurrency Level | Time per request |
+-------------------+------------------+
| 128               | 80.109 ms        |
+-------------------+------------------+
| 256               | 24.815 ms        |
+-------------------+------------------+
| 512               |                  |
+-------------------+------------------+
